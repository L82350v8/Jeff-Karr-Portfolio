<div class="container-fluid px-0" id="fullpage">
  <!-- active section -->
  <div class="container-fluid px-0 section active" id="intro-area">
    <div class="container">
      <div class="row">
        <div class="col-sm-3"></div>
        <div class="col-sm-8">
          <div class="welcome-msg">
            <h3 class="animated fadeIn" id="hello-msg">Hello... and Welcome!</h3>
            <h3 class="animated fadeIn" id="intro-msg">My name is Jeff Karr.</h3>
            <h3 class="animated fadeIn mt-4" id="full-stack-msg">I'm a full stack web developer!</h3>
          </div>
          <div class="job-title">
            <h3 class="animated fadeIn mt-5" id="name">Jeff Karr</h3>
            <h3 class="animated fadeIn mt-2" id="full-stack">Full Stack Web Developer</h3>
          </div>
          <ul class="mt-4">
            <li class="animated fadeInUp" id="li-1">
              <h5>Building web applications that are accurate, reliable and easy-to-use are of my highest priorities.</h5>
            </li>
            <li class="animated fadeInUp mt-2" id="li-2">
              <h5>I have a lot of software engineering and some database admin experience.</h5>
            </li>
            <li class="animated fadeInUp mt-2" id="li-3">
              <h5>I'm most familiar with the MERN technology stack.</h5>
              <p>(The MERN stack includes: MySQL/Mongo, Express, React, Node)</p>
            </li>
            <li class="animated fadeInUp mt-2" id="li-4">
              <h5>I can easily become fully immersed while developing software!
              </h5>
            </li>
            <li class="animated fadeInUp mt-2" id="li-5">
              <h5>I have learned the hard way that work/life balance is important.</h5>
            </li>
            <li class="animated fadeInUp mt-2" id="li-6">
              <h5>I like working with teams that keep everything planned.</h5>
            </li>
            <li class="animated fadeInUp mt-2" id="li-7">
              <h5>I'm dedicated to the continuous improvement of my skills and character.</h5>
            </li>
            <li class="animated fadeInUp mt-2 mb-5" id="li-8">
              <h5>I also like to blend a little play with my work, when appropriate.</h5>
            </li>
          </ul>
        </div>
      </div>
      <div class="row">
        <div class="col-sm-5"></div>
        <p class="animated fadeInUp col-sm-7" id="scroll-msg">(Scroll down to see my Portfolio)</p>
      </div>
    </div>
  </div>
  <!-- portfolio section -->
  <div class="section">
    <div class="container-fluid" id="portfolio-section">
      <h1 class="text-center py-5"> My Portfolio </h1>
      <div class="slide">
        <div class="row mt-5">
          <div class="col-sm-6"></div>
          <div class="col-sm-3">
            <h3>Pet Purfect</h3>
          </div>
        </div>
        <div class="row">
          <div class="col-sm-1"></div>
          <div class="col-sm-4 content mt-0 px-0">
            <a href="../public/assets/images/Pet Purfect Demo.mp4">
              <img class="img-responsive" src="../public/assets/images/pet-purfect-pic.JPG" alt="pet-purfect-pic" style="width:100%">
              <div class="content-overlay"></div>
              <div class="content-details fadeIn-right text-left">
                <p>This full stack web application enables pet owners to easily convey care information about their pet with
                  a caregiver. Providing this information can enhance the care of their pets. Caregivers can also benefit
                  by having a repository of information about each pet that is in their care.
                </p>
              </div>
            </a>
          </div>
          <div class="col-sm-3">
            <p>This full stack web application was designed and built by a team of 4 web developers. The app uses a React.js
              front-end and a mySQL database on the back-end. Sequelize.js is used as the object relational mapper to the
              database. Firebase Storage is used to hold uploaded images. The server uses Node.js, Express.js and Axios.js
              libraries. This app uses a model-view-controller (MVC) folder structure. And, Passport.js is used for the user
              authentication.
            </p>
          </div>
          <div class="col-sm-3">
            <ul>
              <li>React.js</li>
              <li>mySQL</li>
              <li>Sequelize.js</li>
              <li>Firebase Storage</li>
              <li>Node.js</li>
              <li>Express.js</li>
              <li>Axios.js</li>
              <li>MVC folder structure</li>
              <li>Passport.js</li>
            </ul>
          </div>
        </div>
        <div class="row">
          <div class="container-fluid text-center mt-5">
            <p>(Scroll down to find more About Me)</p>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>NYT Article Search</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content mt-0 px-0">
              <a href="https://nytreact-1.herokuapp.com/">
                <img class="img-responsive" src="../public/assets/images/nytreact-pic-2.JPG" alt="nytreact-pic" style="width:100%">
                <div class="content-overlay"></div>
                <div class="content-details fadeIn-right text-left">
                  <p>This full stack web application allows users to search for articles of interest from a prominent news organization
                    and either read those articles or save them in a database to be read later.</p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This full stack web application was built using React.js to render the web page and a Mongo database to store
                the saved data. Node.js code executes on the web server. Express.js and Axios.js are used to handle the routes
                and the call to the NYT website. And, Mongoose.js is used as the Object Relational Mapper (ORM) to the database.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript (ES6)</li>
                <li>React.js</li>
                <li>JSX</li>
                <li>Node.js</li>
                <li>Express.js</li>
                <li>MongoDB</li>
                <li>Mongoose.js</li>
                <li>Axios.js</li>
                <li>Bootstrap 4</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Click-the-Truck</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://jeffkarr.github.io/click-the-truck-game/">
                <img class="img-responsive" src="../public/assets/images/Click-the-truck-game-screenshot.JPG  " alt="click-the-truck-pic"
                  style="width:100%">
                <div class="content-overlay"></div>
                <div class="content-details fadeIn-right text-left">
                  <p>The objective of this memory game is to click all of the truck images
                    <i>only once</i> to attain the top score of 12 points.</p>
                  <p>The images are reshuffled after each click.</p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This memory game was built using React, Javascript and JSX. In this project, I worked with React's Component
                architecture, managing state, using props, using Javascript ES6 syntax, using JSX syntax and executing the
                React deployment process. I used the Bootstrap 4 framework to style the site.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript (ES6)</li>
                <li>React.js</li>
                <li>JSX</li>
                <li>Bootstrap 4</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Eat Da Burger</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content" id="eat-da-burger">
              <a href="https://sequelized-burger1.herokuapp.com/">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/sequelizeBurgers-pic.jpg" alt="eat-da-burgers-pic" style="width:100%"
                  "object-fit:cover">
                <div class="content-details fadeIn-right">
                  <p>Customers can order burgers and devour them. Or customers can delete all of their orders
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This full stack web application uses a "Model/View/Controller" folder structure and a mySQL database. The application
                uses Node.js to communicate with the server and uses Express.js to support the http requests. Sequelize.js
                is used as the "Object Relational Mapper" that interfaces with the database. And, Handlebars.js is used to
                render client-side templates on the HTML page.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>jQuery</li>
                <li>AJAX</li>
                <li>MVC file structure</li>
                <li>MySQL database</li>
                <li>Sequelize.js</li>
                <li>Handlebars.js </li>
                <li>Node.js</li>
                <li>Express.js</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>News Scraper</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://news-scraper-app-1.herokuapp.com/">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/mongo-news-scraper-pic.JPG" alt="news-scraper-pic" style="width:100%">
                <div class="content-details fadeIn-right">
                  <p>This full stack application scrapes news articles from a static web site and saves those articles in a
                    Mongo database.
                  </p>
                  <p>Users can also create, edit or delete their comments about articles.</p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This full stack web app uses Cheerio.js to parse the HTML code of the web site. Other Javascript libraries
                such as Request.js and Axios.js are used to simplify http requests. Node.js and Express.js are used to communicate
                with the server. Mongoose.js is used as the "Object Relational Mapper" to interface with the Mongo database.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Mongo database</li>
                <li>Mongoose.js</li>
                <li>Cheerio.js</li>
                <li>Axios.js</li>
                <li>Request.js </li>
                <li>Node.js</li>
                <li>Express.js</li>
                <li>jQuery</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Trivia Game</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://jeffkarr.github.io/TriviaGame/">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/Trivia Game.jpg" alt="trivia-game-pic" style="width:100%">
                <div class="content-details fadeIn-right">
                  <p>A player is shown a total of 10 trivia questions about characters from the Dilbert comic strip. The objective
                    of the game is to answer all 10 questions correctly within the time allowed.
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This front-end web application uses Javascript and jQuery. The app extensively uses array processing to present
                a series of trivia questions to the player. All HTML elements except for the title and background are dynamically
                generated using jQuery code. The app also uses a timer method to control events that occur on the screen.
                I had fun building this app!
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>jQuery</li>
                <li>DOM setInterval method</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Train Time</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://jeffkarr.github.io/Train-Scheduler-app/">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/Train-Scheduler-App.PNG" alt="train-scheduler-pic" style="width:100%">
                <div class="content-details fadeIn-right">
                  <p>This front-end application allows players to create and save train schedules in a Firebase database.</p>
                  <p>Multiple players can see all of the train schedules in real time since all schedules are stored in the
                    database.
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This front end web application uses Moment.js to perform calculations involving time that are related to scheduling
                train trips. The trip data is stored in a Firebase database. jQuery code is used to collect the new train
                data and to present the trip information on the web page. An animated GIF is used as a background image.
                Bootstrap 4 was used to design the look of the website.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Moment.js</li>
                <li>Firebase database</li>
                <li>jQuery</li>
                <li>GIF background</li>
                <li>Bootstrap 4</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Take A Hike</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://jeffkarr.github.io/Take-A-Hike/">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/Take-A-Hike.PNG" alt="take-a-hike-pic" style="width:100%">
                <div class="content-details fadeIn-right">
                  <p>This application gives users a tool to find outdoor recreation activities that are near their current location
                    or for a zip code.
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This front end web application was designed and built by a team of 4 web developers. The app uses several API
                interfaces to display outdoor recreation information to users. Firebase authentication is used when users
                log in. Covervid.js is used to display the background video. And, Bootstrap 4 was used to design the look
                of the site.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Firebase Authentication</li>
                <li>CoverVid.js</li>
                <li>HTML5 geolocation API</li>
                <li>The Hiking Project API</li>
                <li>The Mountain Bike Project API</li>
                <li>The Powder Project API</li>
                <li>Bootstrap 4</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Bamazon CLI</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="../public/assets/images/bamazon-cli-demo-small.mp4">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/demo-bamazon-cli-pic.jpg" alt="bamazon-pic" style="width:100%">
                <div class="content-details fadeIn-right text-center">
                  <p>This app interacts with a user to process purchase requests and manage inventory for a typical e-commerce
                    store front.
                  </p>
                  <p>The app offers a Customer view, a Manager view or a Supervisor view.</li>
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This server-side command line interface uses Node.js to execute Javascript code on the server. The app uses
                Inquirer.js to interact with a user thru their computer's "command line" interface. The data is stored in
                a mySQL database. SQL is used to query two database tables. Easy-table.js is used to present the queried
                data.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Node.js</li>
                <li>Inquirer.js</li>
                <li>mySQL database</li>
                <li>SQL</li>
                <li>Command Line</li>
                <li>Easy-table.js</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>LIRI CLI</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="../public/assets/images/LIRI-demo.mp4">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="./public/assets/images/LIRI-demo-pic.jpg" alt="liri-pic" style="width:100%">
                <div class="content-details fadeIn-right text-left">
                  <p>Users can request specific information from a web site using their computer's command prompt.
                  </p>
                  <p>See your last 20 tweets from Twitter.</p>
                  <p>See information about a song from Spotify.</p>
                  <p>See information about a movie from OMDB.</p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This server-side command line interface uses Node.js to execute Javascript code on a server. Instructions received
                from a user's command prompt are used to collect data from a web site using an API. Dotenv.js is used to
                safely store the API key information in a confidential environment variable. The app can also process requests
                that are read from a text file.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Node.js</li>
                <li>Twitter API</li>
                <!-- add icon here -->
                <li>Spotify API</li>
                <!-- add icon here -->
                <li>OMDB API</li>
                <!-- add icon here -->
                <li>Dotenv.js</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Word Guess CLI</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="../public/assets/images/wordGuess-CLI-demo-small.mp4">
                <div class="content-overlay"></div>
                <img class="img-responsive" src="../public/assets/images/wordGuess-demo-pic.JPG" alt="word-guess-pic" style="width:100%">
                <div class="content-details fadeIn-right text-left">
                  <p>A player attempts to guess the masked letters of a word using their computer's command prompt.
                  </p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This server side command line game uses Node.js to execute Javascript code on the server. Inquirer.js is used
                to facilitate the player's letter guesses that are sent thru the command line. Javascript constructor functions
                are used build new word and letter objects for each game. Javascript methods that are embedded within these
                objects are used to perform the tasks needed to run the game.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Inquirer.js</li>
                <li>Node.js</li>
                <li>Object Oriented Programming</li>
              </ul>
            </div>
          </div>
        </div>
        <div class="slide">
          <div class="row mt-5">
            <div class="col-sm-6"></div>
            <div class="col-sm-3">
              <h3>Hangman</h3>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-4 content">
              <a href="https://jeffkarr.github.io/Hangman-Game/">
                <img class="img-responsive" src="../public/assets/images/Hangman-game-pic.JPG" alt="hangman-pic" style="width:100%">
                <div class="content-overlay"></div>
                <div class="content-details fadeIn-right text-left">
                  <p>The objective of this game is to guess all of the letters of a word that is related to a 1960s Muscle Car
                    within 10 attempts.</p>
                </div>
              </a>
            </div>
            <div class="col-sm-3">
              <p>This basic front end game was built using Javascript code. The Bootstrap 4 framework was used to design the
                look of the web page. HTML DOM methods are used to collect player responses and to present information on
                the web page.
              </p>
            </div>
            <div class="col-sm-3">
              <ul>
                <li>Javascript</li>
                <li>Bootstrap 4</li>
                <li>HTML DOM methods</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- about section -->
  <div class="section">
    <div class="container-fluid py-5" id="about-section">
      <h1 class="text-center mb-5"> About Me </h1>
      <div class="row">
        <div class="col-sm-4">
          <img class="rounded ml-5 img-responsive" id="jk-about-pic" src="../public/assets/images/jk-pic-5.jpg" alt="jk-pic-5">
        </div>
        <div class="col-sm-1"></div>
        <div class="col-sm-6 pl-0">
          <p>I grew up in Gladstone, Missouri. After high school, I graduated from the University of Missouri at Kansas City
            with a Bachelor's degree in Business Administration. After college, I worked with my father operating a small
            used car lot for 6 years. After my small business experience, I enjoyed working for a large financial services
            corporation for over 23 years (16 years as a mainframe software engineer and the last 4 years as a mainframe
            database administrator). I've just completed a Full Stack Web Developer course from the University of Kansas,
            and I'm now seeking an employment opportunity as a full stack web developer.
          </p>
          <br>
          <p>
            My wife and I have been married for 10 years and do not have any children. We enjoy raising our 4 Labrador Retrievers (two
            are UKC hunting retriever champions!).
          </p>
          <br>
          <p>
            My hobbies include: camping, hiking, canoeing, travel, bird hunting (with our dogs), snow skiing, off-roading, listening
            to music and binge watching TV shows or movies. And on rare occasions, I enjoy modifying my old Corvette.
          </p>
        </div>
      </div>
    </div>
  </div>
  <!-- contact section -->
  <div class="section">
    <div class="container-fluid py-5" id="contact-section">
      <h1 class="text-center"> Contact Me </h1>
      <div class="row text-center" id="msg-confirm-area"></div>
      <div class="row">
        <div class="col-sm-3"></div>
        <div class="col-sm-6">
          <form class="py-4" id="contact-form">
            <div class="form-group">
              <div class="row">
                <div class="col-sm-6">
                  <label for="name-input">Your Name</label>
                  <input class="form-control" id="name-input" name="name" type="text">
                </div>
                <div class="col-sm-6">
                  <label for="company-input">Your Company</label>
                  <input class="form-control" id="company-input" name="company" type="text">
                </div>
              </div>
              <div class="form-group mt-3">
                <div class="row">
                  <div class="col-sm-8">
                    <label for="email-input">Your Email Address</label>
                    <input type="email" class="form-control" id="email-input" name="email">
                  </div>
                  <div class="col-sm-4">
                    <label for="phone-input">Your Phone</label>
                    <input type="text" class="form-control" id="phone-input" name="phone">
                  </div>
                </div>
              </div>
              <div class="form-group">
                <label for="subject-input">Subject</label>
                <input class="form-control" id="subject-input" name="subject" type="text">
              </div>
              <div class="form-group">
                <label for="message-input">Your Message</label>

                <textarea class="form-control" id="message-input" onfocus="setBgColor()" name="message" rows="5" type="text"></textarea>
              </div>
          </form>
          <div class="row">
            <div class="col-sm-5"></div>
              <button type="submit" class="btn btn-lg float-right" id="contact-btn">Send Email</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>